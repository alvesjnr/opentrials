MODELS
======

    >>> import re
    >>> from django.db import models
    >>> from django.contrib.contenttypes.models import ContentType
    >>> from djangoplus.test_utils import model_has_fields, is_model_class_fk, is_field_type, is_model_pk

Translation
-----------

Translation is a simple model class to be used as just an abstraction, what means you must
extend it to be used.

    >>> from polyglot.models import Translation
    >>> Translation._meta.abstract
    True

Fields are just a language code (i.e.: pt-br, en, es, etc.), the generic related content type
relation and the object ID.

    >>> model_has_fields(Translation, ('language','content_type','object_id',))
    []

To be used as more generic as possible, object ID should be a CharField, not a PositiveIntegerField

    >>> is_field_type(Translation, 'object_id', models.CharField, max_length=100, db_index=True)
    True

There must have a unique together index to make sure there is only a translation for a language +
a content type + an object ID

    >>> ('content_type','object_id','language') in Translation._meta.unique_together
    True

    >>> is_model_class_fk(Translation, 'content_type', ContentType)
    True

    >>> from django.contrib.contenttypes import generic
    >>> isinstance(Translation.content_object, generic.GenericForeignKey)
    True

Using and extending Translation
-------------------------------

    >>> from django.contrib.flatpages.models import FlatPage
    >>> from polyglot.tests.test_models import FlatPageTranslation, create_tables

The related class has an attribute 'translations' with a generic relation to our translation subclass

    >>> isinstance(FlatPage.translations, generic.ReverseGenericRelatedObjectsDescriptor)
    True

Create the table in database

    >>> create_tables()

Test table created with successful

    >>> FlatPageTranslation.objects.count()
    0

Creating a flat page as the original object to be translated

    >>> page1 = FlatPage.objects.create(title='About Test', content='This is a page about our institute.')

Now translating the object "page1"

    >>> trans1 = FlatPageTranslation()
    >>> trans1.language = 'pt-br'
    >>> trans1.content_object = page1
    >>> trans1.title = 'Sobre o Teste'
    >>> trans1.content = u'Esta é uma página sobre nosso instituto.'
    >>> trans1.save()

TranslationManager
------------------

    >>> from polyglot.models import TranslationManager

    >>> isinstance(Translation.objects, TranslationManager)
    True

Now getting translation for the object "page1"

    >>> trans1 = FlatPageTranslation.objects.get_translation_for_object(lang='pt-br', obj=page1)
    >>> trans1.language == 'pt-br'
    True

    >>> try:
    ...     trans1 = FlatPageTranslation.objects.get_translation_for_object(lang='es', obj=page1)
    ...     bool(trans1)
    ... except FlatPageTranslation.DoesNotExist:
    ...     print False
    False

The function 'get_translation_for_object' gets a translation object and stores in cache,
so, when called again, it will save database calls and get directly using the Django's
cache system.

    >>> key = FlatPageTranslation.objects.make_cache_key(model=FlatPageTranslation, object_id=page1.pk, lang='pt-br')
    >>> bool(re.match('polyglot:translation:temporary_test.FlatPageTranslation|\d+|pt-br', key))
    True

    >>> from django.core.cache import cache
    >>> isinstance(cache.get(key), FlatPageTranslation)
    True

